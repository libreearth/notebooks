# Desarrollo con Elixir/OTP XXVII

## Procesos de enlace

Por el momento tenemos 3 procesos de servidor que se ejecutan de manera continua. No obstante, en ocasiones los procesos pueden interrumpirse y debemos de actuar acorde a ello para que la aplicación no tenga fallos.

¿Cómo podríamos hacer que nuestros servidores "HTTPServer", "PledgeServer" y "SensorServer" fuesen resilientes y se adaptasen a los posibles fallos? A partir de ahora los llamaremos HS, PS y SS, respectivamente.

Nuestra intención es crear algo que inicie los procesos, monitorice su funcionamiento y los reinicie si alguno sufre un error.

En el caso de PS y SS los procesos son procesos de GenServer, y OTP tiene ofrece un comportamiento como supervisor que usaremos más adelante para realizar estas 3 funciones. Sin embargo, el HS no es un proceso de GenServer; sino que es un proceso común de Elixir que no sigue los convenios de OTP. Para este caso, en vez de usar el comportamiento de supervisor, crearemos un proceso simple de GenServer que llamaremos "*KickStarter*".

```elixir
defmodule Servy.KickStarter do
  use GenServer

  def start do
    IO.puts("Starting the kickstarter...")
    GenServer.start(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    IO.puts("Starting the HTTP server...")
    server_pid = spawn(Servy.HttpServer, :start, {4000})
    Process.register(server_pid, :http_server)
    {:ok, server_pid}
  end
end
```

Las definiciones y funciones que hemos utilizado apenas difieren de las que venimos implementando en lecciones anteriores.

Podemos lanzar una excepción en el caso de que se produzca un fallo enviando una señal de salida en vez de hacerlo mediante código.

Es posible comprobar si un servidor activo ejecutando siguiente función:

Porcess.**alive?**(server_pid)

Los procesos de servidor que acabamos de definir se ejecutan de manera independiente y el fallo de uno no condiciona el funcionamiento del otro. Como recordamos, nuestra intención es que "KickStarter" detecte que el HS sufra un fallo. Para ello es necesario **enlazarlos** (**linking**).

```elixir
defmodule Servy.KickStarter do
  use GenServer

  def start do
    IO.puts("Starting the kickstarter...")
    GenServer.start(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    IO.puts("Starting the HTTP server...")
    server_pid = spawn(Servy.HttpServer, :start, {4000})
    Process.link(server_pid)
    Process.register(server_pid, :http_server)
    {:ok, server_pid}
  end
end
```

Si ahora enviamos una señal de salida a HS provocaría su parada. Esto, consecuentemente, notifica al proceso enlazado ("KickStarter") enviándole la misma señal de salida, por lo que este último también se detiene.

Realmente esto no es lo que andábamos buscando, puesto que nos interesa que el KS continúe ejecutándose. Podemos reiniciar el HS, lo que significa inicializar un nuevo proceso de servidor web. No hay manera de reiniciar un proceso "muerto", por lo que buscaremos inicializar un nuevo proceso. Para ello, "KickStarter" deberá atrapar las señales de salida:

```elixir
defmodule Servy.KickStarter do
  use GenServer

  def start do
    IO.puts("Starting the kickstarter...")
    GenServer.start(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    Process.flag(:trap_exist, true)
    IO.puts("Starting the HTTP server...")
    server_pid = spawn(Servy.HttpServer, :start, {4000})
    Process.link(server_pid)
    Process.register(server_pid, :http_server)
    {:ok, server_pid}
  end
end
```

En el caso de que se detecte una excepción, "KickStarter" debe de estar preparado para manejarla, pues por el momento sí que es cierto que no se detendrá al ser capaz de captar la excepción, pero no podrá procesarla adecuadamente. Para resolver esta tarea vamos a crear una función encargada de este procesado de información:

```elixir
defmodule Servy.KickStarter do
  use GenServer

  def start do
    IO.puts("Starting the kickstarter...")
    GenServer.start(__MODULE__, :ok, name: __MODULE__)
  end

  def init(:ok) do
    Process.flag(:trap_exist, true)
    IO.puts("Starting the HTTP server...")
    server_pid = spawn(Servy.HttpServer, :start, {4000})
    Process.link(server_pid)
    Process.register(server_pid, :http_server)
    {:ok, server_pid}
  end

  def handle_info({:EXIT, _pid, reason}, _state) do
    IO.puts("HttpServer exited (#{inspect(reason)})")
    IO.puts("Starting the HTTP server...")
    server_pid = spawn(Servy.HttpServer, :start, {4000})
    Process.link(server_pid)
    Process.register(server_pid, :http_server)
    {:noreply, server_pid}
  end
end
```

La estructura utilizada como parámetro es el mensaje recibido anteriormente en respuesta al fallo que presentaba "KickStarter" a la hora de procesar la excepción y no ser capaz de ello. Con este código, en respuesta a la excepción "KickStarter" ejecuta el mismo código que ya ejecutaba en la función *init* generando de nuevo el proceso.

Para terminar, vamos a eliminar la redundancia de nuestro código existente entre las funciones *init* y *handle_info*:

```elixir
defmodule Servy.KickStarter do
  use GenServer

  def start do 
    IO.puts "Starting the kickstarter..."
    GenServer.start(__MODULE__, :ok, name: __MODULE__)
  end
  
  def init(:ok) do
    Process.flag(:trap_exist, true)
    server_pid = start_server()
    {:ok, server_pid}
  end
end


def handle_info({:EXIT, _pid, reason}, _state) do
  IO.puts "HttpServer exited (#{inspect reason})"
  server_pid = start_server()
  {:noreply, server_pid}
end

def start_server do
  IO.puts "Starting the HTTP server..."
  server_pid = spawn_link(Servy.HttpServer, :start, [4000])
  Process.register(server_pid, :http_server)
  server_pid
end

end
```

Hemos incluido el código redundante en una función llamada *start_server* que es llamada tanto en *init* como en *handle_info*, como era de esperar. Además, hemos integrado tanto la inicialización del proceso como el enlazado que tenían lugar en esta nueva función y previamente en las dos que hemos optimizado haciendo uso de la función "**spawn_link**", definida por defecto que engloba ambas acciones.
