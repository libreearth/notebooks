# Desarrollo con Elixir/OTP XXV

## OTP GenServer

Durante las dos últimas lecciones hemos invertido un tiempo considerable en la creación de nuestros procesos de servidor. Elixir posée una abstracción para crear procesos de servidor, llamada GenServer.

En esta lección veremos cómo aplicar esta abstración a nuestro módulo genérico "GenericServer". En OTP, a los patrones de diseños como los que hemos utilizado en este módulo se les denomina "**comportamientos**". GenServer es un comportamiento para crear procesos de servidor estables. Además, se incluye en las librerías de OTP.

Antes de realizar la conversión, es conveniente reralizar una copia de seguridad del código referente al servidor genérico. Vanmos a trabajar con un módulo llamado "PledgeServerHandRolled", por lo que tenemos que modificar consecuentemente las llamadas al mismo. El siguiente código se encuentra en un archivo paralelo a "pledge_server.ex" llamado "pledge_server_hand_rolled".

```elixir
defmodule Servy.PledgeServerHandRoller do

  alias Servy.GenericServer 

  @name :pledge_server_hand_rolled

  # Client Interface

  def start do
    IO.puts "Starting the pledge server..."
    GnericServer.start(__MODULE__,[], @name)
  end
  

  def create_pledge(name, amount) do
    GenericServer.call @name, {:create_pledge, name, amount}   
  end

  def recent_pledges do
    GenericServer.call @name, :recent_pledges
  end

  def total_pledged do
    GenericServer.call @name, :total_pledged  
  end

  def clear do
    GenericServer.cast @name, :clear
  end
  
  #Helper Functions

  def call(pid,message) do
    send pid, {:call, self(), message}

    recieve do {:response, response} -> response end
  end

  def cast(pid,message) do
    send pid, {:cast, message}
  end


  # Server callbacks

  def listen_loop(state) do
    recieve do

      {:call,sender, message} when is_pid(sender) -> 
        {response,state} = handle_call(message, state)
        send, sender, {:response, response}
        listen_loop(new_state)


       {:cast,message} ->
          new_state = handle_cast(message, state)
          listen_loop(state)

        :clear ->
          new_state = []
          listen_loop(new_state)

      unexpected ->
        IO.puts("Unexpected messaged: #{inspect(unexpected)}")
        listen_loop(state)
    end
  end

def handle_cast(:clear, _state) do
  []
end

def handle_call(:total_pledged, state) do
  total = Enum.map(state, &elem(&1, 1)) |> Enum.sum() 
  {total,state}  
end

def handle_call(:recent_pledges, state) do
  {state,state}
end

def handle_call({:create_pledge, name, amount}, state) do #The whole tuple is the message.
  {:ok, id} = send_pledge_to_service(name, amount)
  most_recent_pledges = Enum.take(state, 2)
  new_state = [{name, amount} | most_recent_pledges]
  {id, new_state}       
end

#alias Servy.PledgeServerHandRoller

#pid = spawn(PledgeServerHandRoller, :listen_loop, [[]])
#IO.inspects(PledgeServerHandRoller.create_pledge(pid, "larry", 10))
#IO.inspects(PledgeServerHandRoller.create_pledge(pid, "moe", 20))
#IO.inspects(PledgeServerHandRoller.create_pledge(pid, "curly", 30))
#IO.inspects(PledgeServerHandRoller.create_pledge(pid, "daisy", 40))
#IO.inspects(PledgeServerHandRoller.create_pledge(pid, "grace", 50))

#IO.inspect(PledgeServerHandRoller.recent_pledges(pid))
```

El primer paso para convertir nuestro servidor genérico a GenServer es eliminar por completo el módulo original pues con GenServer podremos implementar lo mismo y más. Del mismo modo, todas las llamadas al mismo han de ser modificadas.

```elixir
defmodule Servy.PledgeServer do

  alias Servy.GenericServer 

  @name :pledge_server

  # Client Interface

  def start do
    IO.puts "Starting the pledge server..."
    GenServer.start(__MODULE__,[], name: @name)
  end
  

  def create_pledge(name, amount) do
    GenServer.call @name, {:create_pledge, name, amount}   
  end

  def recent_pledges do
    GenServer.call @name, :recent_pledges
  end

  def total_pledged do
    GenServer.call @name, :total_pledged  
  end

  def clear do
    GenServer.cast @name, :clear
  end
  
  #Helper Functions

  def call(pid,message) do
    send pid, {:call, self(), message}

    recieve do {:response, response} -> response end
  end

  def cast(pid,message) do
    send pid, {:cast, message}
  end


  # Server callbacks

  def listen_loop(state) do
    recieve do

      {:call,sender, message} when is_pid(sender) -> 
        {response,state} = handle_call(message, state)
        send, sender, {:response, response}
        listen_loop(new_state)


       {:cast,message} ->
          new_state = handle_cast(message, state)
          listen_loop(state)

        :clear ->
          new_state = []
          listen_loop(new_state)

      unexpected ->
        IO.puts("Unexpected messaged: #{inspect(unexpected)}")
        listen_loop(state)
    end
  end

def handle_cast(:clear, _state) do
  []
end

def handle_call(:total_pledged, state) do
  total = Enum.map(state, &elem(&1, 1)) |> Enum.sum() 
  {total,state}  
end

def handle_call(:recent_pledges, state) do
  {state,state}
end

def handle_call({:create_pledge, name, amount}, state) do #The whole tuple is the message.
  {:ok, id} = send_pledge_to_service(name, amount)
  most_recent_pledges = Enum.take(state, 2)
  new_state = [{name, amount} | most_recent_pledges]
  {id, new_state}       
end

#alias Servy.PledgeServer

#pid = spawn(PledgeServer, :listen_loop, [[]])
#IO.inspects(PledgeServer.create_pledge(pid, "larry", 10))
#IO.inspects(PledgeServer.create_pledge(pid, "moe", 20))
#IO.inspects(PledgeServer.create_pledge(pid, "curly", 30))
#IO.inspects(PledgeServer.create_pledge(pid, "daisy", 40))
#IO.inspects(PledgeServer.create_pledge(pid, "grace", 50))

#IO.inspect(PledgeServer.recent_pledges(pid))
```

En la llamada a *start* desde el módulo GenServer se incluye "@name" como tercer parámetro; cosa que en GenServer incluímos haciendo que ese elemento sea una lista de palabras clave. Para lo cual, vamos a decir que el nombre sea el "@name" en cuestión. Más adelante veremos que GenServer necesita 4 funciónes de retorno extra además de las que nosotros ya creamos: *handle_call* y *handle_cast*. En el caso de que alguna de estas funciones de retorno de las 6 que requiere GenServer no sea necesario,pueden ser implementadas de manera predeterminada.

Para hacer esto, hemos de ir al principio del fichero e icnluir la siguiente línea:

use GenServer

No obstante, hemos de modificar ligeramente las dos funciones de retorno ya implementadas para que GenServer las pueda procesar de manera correcta. Hemos de añadir a las tuplas de salida (o bien convertir en tupla aquella salida que no lo sea) los átomos "**:noreply**" y "**:reply**", en función de las que deban ser devueltas o no. Además, GenServer recibe tres parámetros, es decir, incluye uno nuevo conocido como "**from**", pero como no nos interesa especificar al respecto, lo utilizaremos acompañado de "_": "**_from**".

También es importante modificar  la línea en la que obtenemos el PID mediante la función *start*, pues ahora estamos llamado a la función *start* pero de GenServer, y esta también devuelve una tupla.

```elixir
defmodule Servy.PledgeServer do

  @name :pledge_server

  use GenServer

  # Client Interface

  def start do
    IO.puts "Starting the pledge server..."
    GenServer.start(__MODULE__,[], name: @name)
  end
  

  def create_pledge(name, amount) do
    GenServer.call @name, {:create_pledge, name, amount}   
  end

  def recent_pledges do
    GenServer.call @name, :recent_pledges
  end

  def total_pledged do
    GenServer.call @name, :total_pledged  
  end

  def clear do
    GenServer.cast @name, :clear
  end
  
  #Helper Functions

  def call(pid,message) do
    send pid, {:call, self(), message}

    recieve do {:response, response} -> response end
  end

  def cast(pid,message) do
    send pid, {:cast, message}
  end


  # Server callbacks

  def listen_loop(state) do
    recieve do

      {:call,sender, message} when is_pid(sender) -> 
        {response,state} = handle_call(message, state)
        send, sender, {:response, response}
        listen_loop(new_state)


       {:cast,message} ->
          new_state = handle_cast(message, state)
          listen_loop(state)

        :clear ->
          new_state = []
          listen_loop(new_state)

      unexpected ->
        IO.puts("Unexpected messaged: #{inspect(unexpected)}")
        listen_loop(state)
    end
  end

def handle_cast(:clear, _state) do
  {:noreply, []}
end

def handle_call(:total_pledged, _from, state) do
  total = Enum.map(state, &elem(&1, 1)) |> Enum.sum() 
  {:reply,total,state}  
end

def handle_call(:recent_pledges, _from, state) do
  {:reply,state,state}
end

def handle_call({:create_pledge, name, amount},_from, state) do #The whole tuple is the message.
  {:ok, id} = send_pledge_to_service(name, amount)
  most_recent_pledges = Enum.take(state, 2)
  new_state = [{name, amount} | most_recent_pledges]
  {:reply,id, new_state}       
end

#alias Servy.PledgeServer

#pid = spawn(PledgeServer, :listen_loop, [[]])
#IO.inspects(PledgeServer.create_pledge(pid, "larry", 10))
#IO.inspects(PledgeServer.create_pledge(pid, "moe", 20))
#IO.inspects(PledgeServer.create_pledge(pid, "curly", 30))
#IO.inspects(PledgeServer.create_pledge(pid, "daisy", 40))
#IO.inspects(PledgeServer.create_pledge(pid, "grace", 50))

#IO.inspect(PledgeServer.recent_pledges(pid))
```

Supongamos ahora que queremos modificar el tamaño de la caché mientras que el servidor se está ejecutando. Esto será parte del estado del servidor, por lo que este incluirá una lista de las pledges con un número que represente el tamaño de la caché. Así pues, al iniciar el servidor no será suficiente con una lista, sino que necesitaremos un map cuyas claves sean tamaños de caché y los valores listas:

```elixir
# ...
def start do
  IO.puts("Starting the pledge server...")
  GenServer.start(__MODULE__, %{cache_size: 3, pledges: []}, name: @name)
end

# ...
```

Es más cómodo definir un struct con campos cuyos valores sean predeterminados:

```elixir
# ...

defmodule State do
  defstruct cache_size: 3, pledge: []
end

# ...

def start do
  IO.puts("Starting the pledge server...")
  GenServer.start(__MODULE__, %State{}, name: @name)
end

# ...
```

Además, hay que modificar las funciones que utilizan el estado:

-Mapeamos la lista de pledges del struct, no el estado, en la cláusula de "total_pledged".

-Devolvemos la lista de pledges del struct, no el estado, en la cláusula de "recent_pledged".

-El estado recibido ahora en la cláusula de "create_pledge" es la lista de pledges del struct, además añadiremos la nueva pledge al principio de la lista por lo que deberemos de otorgarle como parámetro a la función *enum* el tamaño de la lista menos 1.
Ahora el "new_state" que tenemos que devolver deberán ser las pledges contenidas en la caché, pues ahora "new_state" es el estado actual en el que las pledges existentes pasan a ser las nuevas pledges contenidas en caché.

```elixir
#...

def handle_cast(:clear, state) do
  {:noreply, %{ state | pledges: []}}
end

def handle_call(:total_pledged, _from, state) do
  total = Enum.map(state.pledges, &elem(&1, 1)) |> Enum.sum() 
  {:reply,total,state}  
end

def handle_call(:recent_pledges, _from, state) do
  {:reply,state.pledges,state}
end

def handle_call({:create_pledge, name, amount},_from, state.pledges) do #The whole tuple is the message.
  {:ok, id} = send_pledge_to_service(name, amount)
  most_recent_pledges = Enum.take(state, state.cache_size - 1)
  cache_pledges = [{name, amount} | most_recent_pledges]
  new_state = %{ state | pledges_ cached_pledges}
  {:reply,id, new_state}       
end

#...
```

También es posible otorgarle un tamaño arbitrario a la caché. Para ello vamos a crear una función en la interfaz de usuario llamada "*set_cache_size*". También hemos de crear una cláusula d ela función *cast* que pueda procesar este mensaje.

```elixir
# ...

def set_cache_size(size) do
  GenServer.cast(@name, {:set_cache_size, size})
end

def handle_cast({:set_cache_size, size}, state) do
  new_state = %{state | cache_size: size}
  {:noreply, new_state}
end

# ...
```

Previamente mencionamos que GenServer genera de manera automática 6 funciones de las cuales tan solo hemos utilizado 2. Veamos ahora otra de estas 6...

Normalmente, cuando inicializamos nuestro servidor utilizamos el estado por defecto; por lo que cuando inicalizamos el proceso, la lista de pledges siempre está vacía. Idealmente, en este momento debería de tomar las pledges más recientes del servicio externo y alojarlas en nuestra caché. Para nuestra suerte, este trabajo lo realiza la función de retorno *init*. Con esta función no solo podemos devolver el estado, sino que también podemos realizar algún proceso con el. En nuestro caso, vamos a modificar el estado inicial que toma la función por una tupla resultante de una función llamada "*fetch_recent_pledges_from_service*" que como es de esperar, recoge las pledges más recientes del servicio externo.

```elixir
# ...

def init(state) do
  pledges = fetch_recent_pledges_from_service()
  new_state = %{state | pledges: pledges}
  {:ok, new_state}
end

# ...

defp fetch_recent_pledges_from_service do
  # CODE GOES HERE TO FETCH RECENT PLEDGES FROM EXTERNAL SERVICE
end

# ...

def handle_info(message, state) do
  IO.puts("Can't touch this! #{inspect(message)}")
  {:noreply, state}
end

# ...
```

A continuación, se ordena el código de "pledge_server.ex" creado hasta el momento:

```elixir
defmodule Servy.PledgeServer do

  @name :pledge_server

  use GenServer

  # Client Interface

  def start do
    IO.puts "Starting the pledge server..."
    GenServer.start(__MODULE__,[], name: @name)
  end
  

  def create_pledge(name, amount) do
    GenServer.call @name, {:create_pledge, name, amount}   
  end

  def recent_pledges do
    GenServer.call @name, :recent_pledges
  end

  def total_pledged do
    GenServer.call @name, :total_pledged  
  end

  def clear do
    GenServer.cast @name, :clear
  end
  
  #Helper Functions

  def call(pid,message) do
    send pid, {:call, self(), message}

    recieve do {:response, response} -> response end
  end

  def cast(pid,message) do
    send pid, {:cast, message}
  end


  # Server callbacks

  def listen_loop(state) do
    recieve do

      {:call,sender, message} when is_pid(sender) -> 
        {response,state} = handle_call(message, state)
        send, sender, {:response, response}
        listen_loop(new_state)


       {:cast,message} ->
          new_state = handle_cast(message, state)
          listen_loop(state)

        :clear ->
          new_state = []
          listen_loop(new_state)

      unexpected ->
        IO.puts("Unexpected messaged: #{inspect(unexpected)}")
        listen_loop(state)
    end
  end

  def init(state) do
    pledges = fetch_recent_pledges_from_service()
    new_state = %{state | pledges: pledges}
    {:ok, new_state}
  end

  
def set_cache_size(size) do
  GenServer.cast @name, {:set_cache_size, size}
end

def handle_cast({:set_cache_size, size}, state) do
  new_state = %{state | cache_size: size}
  {:noreply, new_state}
end
  
def handle_cast(:clear, _state) do
  {:noreply, []}
end

def handle_call(:total_pledged, _from, state) do
  total = Enum.map(state, &elem(&1, 1)) |> Enum.sum() 
  {:reply,total,state}  
end

def handle_call(:recent_pledges, _from, state) do
  {:reply,state,state}
end

def handle_call({:create_pledge, name, amount},_from, state) do #The whole tuple is the message.
  {:ok, id} = send_pledge_to_service(name, amount)
  most_recent_pledges = Enum.take(state, 2)
  new_state = [{name, amount} | most_recent_pledges]
  {:reply,id, new_state}       
end

def handle_info(message, state) do
  IO.puts "Can't touch this! #{inspect message}"
  {:noreply, state}
end

defp fetch_recent_pledges_from_service do
  #CODE GOES HERE TO FETCH RECENT PLEDGES FROM EXTERNAL SERVICE
end

```

Usar GenServer nos asegura un gran respaldo contra multitud de posibles errores que podemos cometer a la hora de elaborar nuestro servidor genérico. Es altamente recomendable usarlo, pues ha sido estudiado y pulido durante tiempo para lograr una interfaz tremendamente eficiente y realmente práctica.
